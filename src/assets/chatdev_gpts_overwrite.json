{
    "Action_YAML_Generate_Yaml": "desc: \"Generate YAML for Agent\"\n\noutputs:\n  overview:\n    reference: ${Generate_Agent}\n\nnodes:\n  - name: Generate_Agent\n    source:\n      path: Action_Editor_Generate_Yaml\n      func: Func_handle_generate\n    inputs:\n      input_text: ${inputs.input_text}\n      doc: \"A flow in PromptFlow is a DAG (Directed Acyclic Graph) of prompts/functions, referred to as nodes.\\nThese nodes are connected via input/output dependencies and are executed based on the topology by the PromptFlow executor.\\nA flow is represented as a YAML file and can be visualized using our IDE. \\n\\nHere is an example:\\nIndicates the definition of the current node's output content. `${TestModification}` references the node's name, \\nsignifying that the current node's output is the output of the `TestModification` node (`output` variable).\\nThis is a standard format, you need to ensure that 'desc' nodes are used to describe your Agent in the map, define 'reference' under 'outputs' nodes to represent the most total nodes, and make all nodes connected.\\n- Chat with Prompt Example\\n```\\n// Required\\ndesc: 'your Agent description' // In the game map, mouse over the description displayed by Agent\\n\\n// Required\\noutputs:\\n  overview:\\n    reference: ${Chatting} // Final node\\n\\n// The definition of a single node supports the text type and url type. The following is an example of the text type\\nnodes:\\n  - name: Chatting\\n    type: prompt\\n    source:\\n      path: Chatting_Prompt_Template // path of prompt.\\n    inputs:\\n      input_text: ${inputs.input_text} // `${inputs.input}` represents the complete content entered in the input box.\\n      intro: 'xxx'\\n```\\nin the prompt:\\n{intro} will replace by 'xxx'\\n{input_text} will replace by the content what you entered in the input box.\\n\\n- Summary Url & chat with Example:\\n```\\ndesc: 'chat with url'\\n\\noutputs:\\n  overview:\\n    reference: ${summary_url}\\n\\nnodes:\\n  - name: get_url\\n    speak: 'get get_url content' // speak represents the content of the game character displayed in the map, which does not result in a large amount of html displayed\\n    type: url\\n    source:\\n      path: 'https://xxxxx.com/'\\n      func: Func_Handle_Url_Summary // Optionally, func defines the path of the JavaScript used to parse the returned html content\\n    inputs:\\n      task: ${inputs.input_text}\\n\\n  - name: summary_url\\n    source:\\n      path: Planning_Prompt_Url\\n    inputs:\\n      info: ${get_url.output} // `${get_url.output}` is a reference to the return content of the get_url node.\\n      task: ${inputs.input_text}\\n```\\n\\nWrite prompt:\\nin the yaml, `source.path` for write prompt. select the highlighted section which is represented as prompt/function then you can edit it.\\nFor example, defining `task` as an input variable in `inputs`, for example: `task: ${get_url.output}`,\\n`${get_url.output}` will replaces the string: `{task}` in the prompt.\\n\\nWrite Func:\\nin the yaml, `source.func` for write JavaScript, this is optional.\\nthe scope of a node object is global for `window`, so you can use any js code in `func`. \\nJQuery is also preset here, you can directly process your text by using `$`.\\nfor example, you can use: `new DOMParser()` or `$('div#xml')`.\\nuse `node.xxx`: represents a variable that references the current node, eg: `node.output`\\nuse `node_name.xxx`: represents a variable that references another node\\n\\n>reference ${inputs.input_text} regardless of whether the first node requires input_text.\"",
    "Action_YAML_Generate_Prompt": "desc: \"Generate Prompt for GPTs\"\n\noutputs:\n  overview:\n    reference: ${Generate_Prompt_JS}\n\nnodes:\n  - name: Generate_Prompt_JS\n    source:\n      path: Action_Editor_Generate_Prompt_JS\n      func: Func_handle_generate\n    inputs:\n      input_text: ${inputs.input_text}",
    "Action_Editor_Generate_Yaml": "{doc}\n\nmake ensure that the first node `inputs` has a reference to to `{input.input_text}`, for example: `input_text: ${inputs.input_text}`\n\nThe above is the definition of Agent YAML format document, according to the above document, help me write a YAML like this:\n\n{input_text}",
    "Func_handle_generate": "let codes = \"\";\nlet output = node.output;\n\nif (output !== \"\") {\n    let regex = /```(?:\\w+)?(.*?)```/gms;\n    let match;\n\n    while ((match = regex.exec(output)) !== null) {\n        codes += match[1] + \"\\n\";\n    }\n    if(codes == \"\"){\n        regex = /```(?:\\w+)?(.*)/gms;\n        while ((match = regex.exec(output)) !== null) {\n            codes += match[1] + \"\\n\";\n        }\n    }\n}\n\nnode.output = codes;\n",
    "Action_Editor_Generate_Prompt_JS": "Write me a piece of JavaScript code where `node` represents the object of the current node, `node.output` represents the content that needs to be processed at the moment, and if there is anything else, you can add it to the node object.\nI've already pre-installed `JQuery` and `Readability` libraries, so you can use JavaScript or existing libraries as needed.\nNow my needs are:\n\n{input_text}",
    "Action_YAML_Template": "# A flow in PromptFlow is a DAG (Directed Acyclic Graph) of prompts/functions, referred to as nodes.\n# These nodes are connected via input/output dependencies and are executed based on the topology by the PromptFlow executor.\n# A flow is represented as a YAML file and can be visualized using our IDE. Here is an example:\n\n# * **outputs**\n\n# ```yaml\n# desc: \"your Agent description\" # In the game map, mouse over the description displayed by Agent\n# outputs:\n#   overview:\n#     reference: ${TestModification} # Final node\n# ```\n\n# Indicates the definition of the current node's output content. `${TestModification}` references the node's name, signifying that the current node's output is the output of the `TestModification` node (`output` variable).\n\n\n# * **nodes**\n# - normal\n# ```yaml\n# desc: \"Chatting with Wolfgang\"\n\n# outputs:\n#   overview:\n#     reference: ${Chatting}\n\n# nodes:\n#   - name: Chatting\n#     source:\n#       path: Action_Prompt_Template\n#     inputs:\n#       input_text: ${inputs.input_text}\n#       intro: \"xxx\"\n# ```\n\n#- example\n# ```yaml\n# desc: \"Chatting with Wolfgang\"\n\n# outputs:\n#   overview:\n#     reference: ${Chatting}\n\n# nodes:\n#   - name: Chatting\n#     source:\n#       path: Action_Target_Dialogue_Npc\n#     inputs:\n#       input_text: ${inputs.input_text}\n#       intro: \"Name: Wolfgang Schulz, Age: 21 Innate tendency: Hardworking, passionate, dedicated,Learned tendency:\n#       Wolfgang Schulz is a student at Oak Hill College studying chemistry and a student athlete.\n#       He is very dedicated to both his academics and his sport. \n#       Currently: Wolfgang Schulz is training for his next competition and studying for his exams. \n#       He is also looking for ways to make his studies more efficient. Lifestyle: Wolfgang Schulz goes to bed around 9pm,\n#       awakes up around 5am, eats dinner around 6pm.\"\n# ```\n# - url\n# ```yaml\n# desc: \"summary elonmusk latest twitter\"\n\n# outputs:\n#   overview:\n#     reference: ${get_content}\n\n# nodes:\n#   - name: elonmusk\n#     speak: \"get elonmusk latest twitter\"\n#     type: url\n#     source:\n#       path: \"https://chatdev.toscl.com/rattibha/user/elonmusk\"\n#       func: Func_twitter\n#     inputs:\n#       task: ${inputs.input_text}\n\n\n#   - name: summary_twitter\n#     source:\n#       path: Planning_Prompt_Twitter\n#     inputs:\n#       info: ${elonmusk.output}\n#       task: ${inputs.input_text}\n# ```",
    "Action_Prompt_Template": "// select the highlighted section on the left,\n// which is represented as prompt/function.\n// You can click on the highlighted section to show the edits here.\n// function use JavaScript to implementing complex prompting techniques. \n\n// * **Input Variables (inputs node):**\n// `source.path` represents a custom prompt with unknown variables like `{xxx}`. \n// For example, defining `task` as an input variable。\n// `${DemandUnderstand.output}` replaces `{task}` in the prompt with `${DemandUnderstand.output}`.\n// `task: ${inputs.input}`: Using a generic input local variable.\n// `${inputs.input}` represents the complete content entered in the input box.\n// `xxx: ${node_name.variable}`: Defining your input variable `xxx`,\n// `${node_name.variable}` references a local variable in another node.\n\n//  * **Output Variables:**\n//     * `output`: Represents the complete content returned by a large model. Referenced in other nodes as `node_name.output`.\n//     * `func`: Custom local variables defined in the `JavaScript` script of a node.\n\n// * **JS Variable Scope**\n// The scope of a js object is global, So you can use any js code that is available in your browser。\n// In order to make it easier for you to parse nodes or web pages, \n// JQuery is also preset here, \n// and you can directly process your text by using `$`\n// use `node.xxx`: represents a variable that references the current node, eg: `node.output`\n// use `node_name.xxx`: represents a variable that references another node\n",
    "Default_Flow_Dag_Yaml": "desc: \"Chatting with Ville\"\n\noutputs:\n  overview:\n    reference: ${ChattingWith_Ville}\n\nnodes:\n  - name: ChattingWith_Ville\n    source:\n      path: Action_Target_Dialogue_Npc\n    inputs:\n      input_text: ${inputs.input_text}\n      intro: \"I want you to play a text-based adventure game. I play a character in this text-based adventure game.\"",
    "Action_Target_Dialogue_Npc": "{intro}\n\nEvents of NPCS near you:\n{game_player_perceived_event}\n\n{game_player_perceived_space}\n\ncurrent time is {now_time}, we are chatting.\n\nI say to you: {input_text}. what you might say?\n\n1. no need to output your analysis process\n2. Output language: {lang}"
}